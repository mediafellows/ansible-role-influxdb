# Installs and configures InfluxDB to be a host for Telegraf metrics
# and to let Chronograf and Kapacitor connect to it with their own users

- name: Install InfluxDB package
  apt:
    name: influxdb
    state: present

- name: Create InfluxDB data dir with correct permissions
  file:
    name: "{{ influxdb_data_dir }}"
    owner: influxdb
    group: influxdb
    mode: 0755
    state: directory

- name: Stop the InfluxDB server before configuration/restore
  service:
    name: influxdb
    state: stopped

- name: Configure InfluxDB (also enables auth)
  template:
    src: influxdb.conf.j2
    dest: /etc/influxdb/influxdb.conf

- name: Use backup for setting up users/DBs/chonograf configs (intead of creating them with Ansible)
  copy:
    src: '{{ influxdb_meta_backup }}'
    dest: '/home/ubuntu/backup/'
  when: influxdb_meta_backup is defined

- shell: influxd restore -metadir {{ influxdb_meta_dir }} /home/ubuntu/backup/
  when: influxdb_meta_backup is defined
  register: restore_output

- name: Restore output
  debug:
    var: restore_output
  when: influxdb_meta_backup is defined

- name: Start the InfluxDB server before to using it in the next steps
  service:
    name: influxdb
    enabled: yes
    state: started

- name: Create InfluxDB admin user
  shell: >
    influx -host {{ influxdb_host }} -port {{ influxdb_port }} -username {{ influxdb_admin_user }} -password {{ influxdb_admin_pw }}
    -execute "CREATE USER {{ influxdb_admin_user }} WITH PASSWORD '{{ influxdb_admin_pw }}' WITH ALL PRIVILEGES"
  when: influxdb_meta_backup is undefined
  register: admin_output

- name: Output result of admin creation
  debug:
    var: admin_output
  when: influxdb_meta_backup is undefined

- name: Create telegraf and chronograf DBs
  influxdb_database:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    database_name:  "{{ item }}"
    state: present
  with_items:
    - "{{ influxdb_telegraf_db }}"
    - "{{ influxdb_chronograf_db }}"
  when: influxdb_meta_backup is undefined

- name: Create retention policy for telegraf DB
  influxdb_retention_policy:
    hostname:       "{{ influxdb_host }}"
    port:           "{{ influxdb_port }}"
    username:       "{{ influxdb_admin_user }}"
    password:       "{{ influxdb_admin_pw }}"
    database_name:  "{{ influxdb_telegraf_db }}"
    policy_name: "{{ telegraf_retention_policy_name }}"
    duration: "{{ telegraf_retention_time }}"
    replication: 1
    default: true
  when: influxdb_meta_backup is undefined

- name: Create chronograf app user with READ access to telegraf and chronograf DB
  shell: >
    influx -host {{ influxdb_host }} -port {{ influxdb_port }} -username {{ influxdb_admin_user }} -password {{ influxdb_admin_pw }}
    -execute "CREATE USER {{ influxdb_chronograf_user }} WITH PASSWORD '{{ influxdb_chronograf_pw }}'" &&
    influx -host {{ influxdb_host }} -port {{ influxdb_port }} -username {{ influxdb_admin_user }} -password {{ influxdb_admin_pw }}
    -execute "GRANT ALL ON {{ influxdb_telegraf_db }} TO {{ influxdb_chronograf_user }}" &&
    influx -host {{ influxdb_host }} -port {{ influxdb_port }} -username {{ influxdb_admin_user }} -password {{ influxdb_admin_pw }}
    -execute "GRANT ALL ON {{ influxdb_chronograf_db }} TO {{ influxdb_chronograf_user }}"
  register: chronograf_output
  when: influxdb_meta_backup is undefined

- name: Output result of chronograf user creation
  debug:
    var: chronograf_output
  when: influxdb_meta_backup is undefined

- name: Create telegraf agent user with WRITE access to telegraf DB
  shell: >
    influx -host {{ influxdb_host }} -port {{ influxdb_port }} -username {{ influxdb_admin_user }} -password {{ influxdb_admin_pw }}
    -execute "CREATE USER {{ influxdb_telegraf_user }} WITH PASSWORD '{{ influxdb_telegraf_pw }}'" &&
    influx -host {{ influxdb_host }} -port {{ influxdb_port }} -username {{ influxdb_admin_user }} -password {{ influxdb_admin_pw }}
    -execute "GRANT ALL ON {{ influxdb_telegraf_db }} TO {{ influxdb_telegraf_user }}"
  register: telegraf_output
  when: influxdb_meta_backup is undefined

- name: Output result of telegraf user creation
  debug:
    var: telegraf_output
  when: influxdb_meta_backup is undefined
